/**
	*Global全局JS代码
*/
function grin(a) {
	var b;
	if (a = " " + a + " ", !document.getElementById("comment") || "textarea" != document.getElementById("comment").type) return !1;
	if (b = document.getElementById("comment"), document.selection) b.focus(), sel = document.selection.createRange(), sel.text = a, b.focus();
	else if (b.selectionStart || "0" == b.selectionStart) {
		var c = b.selectionStart,
			d = b.selectionEnd,
			e = d;
		b.value = b.value.substring(0, c) + a + b.value.substring(d, b.value.length), e += a.length, b.focus(), b.selectionStart = e, b.selectionEnd = e
	} else b.value += a, b.focus()
}!
function(a, b) {
	function c() {
		f(), g(), i(), e(), h(), d()
	};

	function d() {
		var b = function() {
				var b = a(".slides .owl-pagination > div");
				b.css("width", 100 / b.length + "%")
			};
		a(".slides").owlCarousel({
			slideSpeed: 300,
			paginationSpeed: 400,
			singleItem: !0,
			autoPlay: !0,
			afterUpdate: b,
			afterInit: b
		})
	};

	function e() {
		var c = a("#smileybox"),
			d = a(".smiley i.fa"),
			e = a("#respond .smiley i");
		d.unbind("click"), e.unbind("click"), d.one("click", function() {
			a.get(b["admin-ajax"] + "?action=ajax_data_smiley", function(a) {
				c.html(a)
			})
		}), e.click(function() {
			return c.slideToggle(200), !1
		}), a(document).click(function() {
			c.slideUp(200)
		})
	};

	function f() {
		b.tooltip && (s = a(".picbox:not(.slides .picbox),.pagenavi a,.postmeta a,.archive-header a.rss,.widget_readers a,.widget_tags a"), a(s).unbind("mouseover"), a(s).unbind("mouseout"), a("#tooltip").remove(), a(s).mouseover(function() {
			this.title && (a(this).data("tptitle", this.title), this.title = "", a("body").append('<div id="tooltip">' + a(this).data("tptitle") + "</div>"), a("#tooltip").css({
				left: a(this).offset().left + a(this).outerWidth(!1) / 2 - a("#tooltip").outerWidth(!1) / 2,
				top: a(this).offset().top - 8
			}))
		}), a(s).mouseout(function() {
			a(this).data("tptitle") && (a("#tooltip").remove(), this.title = a(this).data("tptitle"))
		}))
	};

	function g() {
		function f(a) {
			a = a + "_" + b.cookiehash;
			var c = document.cookie.split("; "),
				d = 0;
			for (d = 0; d < c.length; d++) {
				var e = c[d].split("=");
				if (e[0] == a) return unescape(decodeURI(e[1]))
			};
			return ""
		};
		var c = a("#author"),
			d = a("#email"),
			e = a("#url");
		c.val() || d.val() || e.val() || (c.val(f("comment_author")), d.val(f("comment_author_email")), e.val(f("comment_author_url")))
	};

	function h() {
		if (window.history && window.history.pushState && b.ajax) {
			a("a.comment-reply-link,.archive-header a.rss").attr("noajax", !0);
			var g, h, d = a("a[target!=_blank][noajax!=true]"),
				e = a("#topmenu li a,#bottommenu li a"),
				f = a("form.search-form");
			d.unbind("click"), f.unbind("submit"), e.click(function() {
				e.each(function() {
					a(this).parent("li").removeClass("current current-menu-item current-menu-parent current_page_item current-post-ancestor")
				}), a(this).parent("li").addClass("current")
			}), f.submit(function() {
				g = a(this).attr("action"), h = a(this).serialize() + "&action=ajax_container"
			}), d.click(function() {
				g = a(this).attr("href"), h = "action=ajax_container"
			});
			var i = function() {
					return !this.hostname || -1 == this.pathname.indexOf("/wp-admin/") && this.hostname == document.domain ? (a("#container").fadeTo(500, .3), a("body").animate({
						scrollTop: 0
					}, 120), a.ajax({
						url: g,
						data: h,
						type: "GET",
						success: function(b) {
							a("#container").fadeTo(200, 1), a("#container").html(b), g = g.replace("?action=ajax_container", "");
							var d = {
								url: g,
								title: title,
								html: b
							};
							history.pushState(d, "", g), a(".fixedbox .qrcodeimg").html(qrcode), document.title = title, window.addEventListener("popstate", function(b) {
								b.state && (document.title = b.state.title, a("#container").html(b.state.html))
							});
							var e = window.location.hash;
							e && 0 != a(e).length && a(e).offset().top && a("body").animate({
								scrollTop: a(e).offset().top
							}, 120), c()
						},
						error: function() {
							a("#container").fadeTo(200, 1), alert(b.ajax_error)
						}
					}), !1) : void 0
				};
			d.click(i), f.submit(i)
		}
	};

	function i() {
		function p() {
			m > 0 ? (l.val(m), m--, setTimeout(p, 1e3)) : (l.val(o).attr("disabled", !1).fadeTo("slow", 1), m = 15)
		};

		function q() {
			var b = "",
				c = a("#comment").val(),
				d = c.indexOf("<code>"),
				e = c.indexOf("</code>");
			if (d > -1 && e > -1 && e > d) for (b = ""; - 1 != e;) b += c.substring(0, d + 6) + c.substring(d + 6, e).replace(/<(?=[^>]*?>)/gi, "&lt;").replace(/>/gi, "&gt;"), c = c.substring(e + 7, c.length), d = -1 == c.indexOf("<code>") ? -6 : c.indexOf("<code>"), e = c.indexOf("</code>"), -1 == e ? (b += "</code>" + c, a("#comment").val(b)) : -6 == d ? myFielde += "&lt;/code&gt;" : b += "</code>";
			var c = b ? b : a("#comment").val(),
				b = "",
				d = c.indexOf("<pre>"),
				e = c.indexOf("</pre>");
			if (d > -1 && e > -1 && e > d) for (b = b; - 1 != e;) b += c.substring(0, d + 5) + c.substring(d + 5, e).replace(/<(?=[^>]*?>)/gi, "&lt;").replace(/>/gi, "&gt;"), c = c.substring(e + 6, c.length), d = -1 == c.indexOf("<pre>") ? -5 : c.indexOf("<pre>"), e = c.indexOf("</pre>"), -1 == e ? (b += "</pre>" + c, a("#comment").val(b)) : -5 == d ? myFielde += "&lt;/pre&gt;" : b += "</pre>"
		};
		if (b.ajax_comm) {
			var d = (a("#commentform"), '<div class="clear"></div><div id="loading">' + b.commentloading + "...</div>"),
				e = '<div id="error">#</div>',
				f = '">' + b.commentsuccess,
				g = 0,
				h = [],
				i = a("#comments-title"),
				j = a("#cancel-comment-reply-link"),
				l = (j.text(), a("#commentform #submit"));
			l.attr("disabled", !1), $body = window.opera ? "CSS1Compat" == document.compatMode ? a("html") : a("body") : a("html,body"), a("#comment").after(d + e), a("#loading").hide(), a("#error").hide(), a(document).off("submit", "#commentform"), a(document).on("submit", "#commentform", function() {
				return q(), a("#loading").slideDown(), l.attr("disabled", !0).fadeTo("slow", .5), a.ajax({
					url: b["admin-ajax"],
					data: a(this).serialize() + "&action=ajax_comment",
					type: a(this).attr("method"),
					error: function(b) {
						a("#loading").slideUp(), a("#error").slideDown().html(b.responseText), setTimeout(function() {
							l.attr("disabled", !1).fadeTo("slow", 1), a("#error").slideUp()
						}, 3e3)
					},
					success: function(b) {
						a("#loading").hide(), h.push(a("#comment").val()), a("textarea").each(function() {
							this.value = ""
						});
						var c = addComment,
							d = c.I("cancel-comment-reply-link"),
							e = c.I("wp-temp-form-div"),
							j = c.I(c.respondId),
							l = (c.I("comment_post_ID").value, c.I("comment_parent").value);
						i.length && (n = parseInt(i.text().match(/\d+/)), i.text(i.text().replace(n, n + 1))), new_htm = '" id="new_comm_' + g + '"></', new_htm = "0" == l ? '\n<ol style="clear:both;" class="commentlist' + new_htm + "ol>" : '\n<ul class="children' + new_htm + "ul>", ok_htm = '\n<span class="success" id="success_' + g + f, ok_htm += "</span><span></span>\n", a("#respond").before(new_htm), a("#new_comm_" + g).hide().append(b), a("#new_comm_" + g + " li").append(ok_htm), a("#new_comm_" + g).fadeIn(4e3), $body.animate({
							scrollTop: a("#new_comm_" + g).offset().top - 200
						}, 900), p(), g++, d.style.display = "none", d.onclick = null, c.I("comment_parent").value = "0", e && j && (e.parentNode.insertBefore(j, e), e.parentNode.removeChild(e))
					}
				}), !1
			}), addComment = {
				moveForm: function(b, c, d, e) {
					var h, g = this,
						i = g.I(b),
						j = g.I(d),
						k = g.I("cancel-comment-reply-link"),
						l = g.I("comment_parent"),
						m = g.I("comment_post_ID");
					g.respondId = d, e = e || !1, g.I("wp-temp-form-div") || (h = document.createElement("div"), h.id = "wp-temp-form-div", h.style.display = "none", j.parentNode.insertBefore(h, j)), i ? i.parentNode.insertBefore(j, i.nextSibling) : (temp = g.I("wp-temp-form-div"), g.I("comment_parent").value = "0", temp.parentNode.insertBefore(j, temp), temp.parentNode.removeChild(temp)), $body.animate({
						scrollTop: a("#respond").offset().top - 180
					}, 400), m && e && (m.value = e), l.value = c, k.style.display = "", k.onclick = function() {
						var a = addComment,
							b = a.I("wp-temp-form-div"),
							c = a.I(a.respondId);
						return a.I("comment_parent").value = "0", b && c && (b.parentNode.insertBefore(c, b), b.parentNode.removeChild(b)), this.style.display = "none", this.onclick = null, !1
					};
					try {
						g.I("comment").focus()
					} catch (n) {}
					return !1
				},
				I: function(a) {
					return document.getElementById(a)
				}
			};
			var m = 15,
				o = l.val()
		}
	};
	a(function() {
		c(), a(document).keypress(function(b) {
			var c = a("#respond #submit");
			return b.ctrlKey && 13 == b.which || 10 == b.which ? (c.click(), document.body.focus(), void 0) : ((b.shiftKey && 13 == b.which || 10 == b.which) && c.click(), void 0)
		}), a(".returntop").click(function() {
			var b = a(this);
			b.addClass("click"), a("body,html").animate({
				scrollTop: 0
			}, 200, callback = function() {
				b.removeClass("click")
			})
		}), a(".fixedbox .qrcode").click(function() {
			a(this).toggleClass("click"), a(this).find(".qrcodeimg").toggle()
		})
	})
}(jQuery, BingGlobal);


//正文内图片事件
$(function(){
	//添加ajax重载事件
	$('#container').ajaxComplete(alwaysClickImg);
	//定义事件
	function alwaysClickImg(){
		//首先寻找到图片
		var $contextImg = $('.context img');
		//获取显示区域有效高度和宽度
		var screenWidth = $(window).width();
		var screenHeight = $(window).height();
		//如果包含图片则开始执行以下操作
		if ($contextImg) {
			//如果图片包含链接，则给此链接定义点击事件，事件内容为：点击后创建一个div，div的内容为图片已百分百显示，全屏居中，同时全站加上遮罩效果
			//定义空的点击图片位置信息
			var contextImgTop ='45%';
			var contextImgLeft ='45%';
			//需要先遍历
			$contextImg.each(function(){
				if ($(this).parent()[0].tagName == 'A') {
					//如果图片的父元素是a说明，a图片有链接，则给a链接替换为空连接
					$(this).parent().attr('href','javascript:;').attr('target','_blank');
				}else{
					$(this).wrap('<a href="javascript:;"  target="_blank"></a>');
				}
				$(this).parent().click(function(){return false;});
				//开始定义点击事件
				$(this).click(function(){
					//如果存在弹出层图片则清空她，然后再执行
					if ($('#clickImg')) {$('#clickImg').remove()}
					//给body添加遮罩层和弹出层图片元素
					$('body').append('<div id="clickImgBg" style="width: 100%; height:100%; z-index: 9; opacity: 0; position: fixed; top: 0px; left: 0px; display: none; background-color: rgb(170, 170, 170);"></div>');
					$('body').append('<div id="clickImg"><img src="' + $(this).attr('src') + '"></div>');
					//打印保存的点击图片对象
					//获取图片大小
					var clickImgWidth = $('#clickImg>img').width();
					var clickImgHeight = $('#clickImg>img').height();
					//获得图片dom相对于window的位置信息
					contextImgTop = this.getBoundingClientRect().top;
					contextImgLeft = this.getBoundingClientRect().left;
					$('#clickImg').css({zIndex:'10','position':'fixed','top':contextImgTop,'left':contextImgLeft,'height':clickImgHeight,'width':clickImgWidth,'overflow':'inherit','box-sizing':'content-box','opacity':'0','padding':'10px','background-color':'#eee'});
					$('#clickImg').animate({'top':screenHeight/2-clickImgHeight/2,'left':screenWidth/2-clickImgWidth/2,'height':clickImgHeight,'width':clickImgWidth,'opacity':'1','overflow':'inherit'},200);
					$('#clickImgBg').css({'display':'block'});
					$('#clickImgBg').animate({'opacity':'0.7'},200);
				});
				//定义关闭事件
				//给遮罩层和弹出图片层添加点击事件
				$(window).scroll(closeImg);
				$('body').on('click','#clickImg',closeImg);
				$('body').on('click','#clickImgBg',closeImg);
				//定义事件
				function closeImg(){
					$('#clickImgBg').animate({'opacity':'0'},200,function(){$('#clickImgBg').remove()});
					$('#clickImg').animate({'opacity':'0',},200,function(){$('#clickImg').remove()});
				}
			});
		}
	}
	//默认加载自调事件
	alwaysClickImg();
	//首页关闭动画按钮事件
	$('#removeCanvas').hover(function(){
		$('#romoveCanvasTitle').css('display','block');
	},function(){
		$('#romoveCanvasTitle').css('display','none');
	}).click(function(){
		$('body').css('backgroundColor','#ccc');
		$('#header').css({'borderBottom':'10px solid #ccc','borderTop':'15px solid #ccc'});
		$('.header_nothing').css('backgroundColor','#ccc');
		$('.header_nothing_right').css('backgroundColor','#ccc');
		$('#rootbg').remove();
		$('#removeCanvas').remove();
		$('#romoveCanvasTitle').remove();
	});

	//定义文章页侧边锚链接的点击定位事件
	//首先获取到A链接，获取到锚链接的id，取消锚链接事件，给a链接定义点击事件
	//事件内容为找到此元素相对于全局的位置，计算此位置，讲window窗口的滚动位置修改为此链接的位置
	function postNavClick(){

		//给导航的按钮链接添加点击跳转事件
		$('#post_nav a').click(function(){
		var clickPlaceId = $(this).attr('href');
		var clickContext = $('.context '+clickPlaceId)
		var clickPlaceHeight = $('.context '+clickPlaceId).offset().top;
		$("html, body").animate({"scroll-top":clickPlaceHeight - 135},"fast");
		return false;
		});

		//添加滚动监听事件，以便于实时对应左侧的当下锚点
		// $(window).scroll(function(){
		// 	//获取到当前屏幕的高度，再获取到当前的绝对位置为屏幕高度范围的元素
		// 	//获取到这个元素的id值，用此id值操作相应的左侧导航条
		// 	//预定义高亮ID值
		// 	var nowTag ;
		// 	//获取到有效显示区域的高度
		// 	var screenHeight = parseInt($(window).height());
		// 	//获和遍历所有元素的高度
		// 		var h34Each = $('.context h3,.context h4');
		// 		h34Each.each(function(){
		// 			//获取到了所有指定元素的实时高度，使用滚动高度 - 其文档流高度即可，不再使用冗余函数
		// 			var thisTop = $(window).scrollTop() - parseInt($(this).offset().top);
		// 			//如果这个高度在有效视图范围内，则说明其正在眼前，则取出其id值
		// 			if (thisTop <= screenHeight &&  thisTop >= 135 ) {
		// 				$('#post_nav a').removeClass('current').css('backgroundColor','');
		// 				nowTag = $(this).attr('id');
		// 				$('#post_nav a.'+nowTag).addClass('current').css('backgroundColor','#ccc');
		// 				return;
		// 			}
		// 		});
		// });

		//预存储当前高亮值的某个参数作为识别
		var nowCurrentLiId;
		//如果高亮出现了有效改变则触发长菜单事件
		$(window).scroll(function(){
				var nowCurrentLiIdScroll = $('#post_nav a[class*=current]').attr('href');
				//如果新获取到的高亮家伙不为空则比较
				if (nowCurrentLiIdScroll != '') {
					//如果获取到的高亮不等于上一次的高亮
					if (nowCurrentLiIdScroll != nowCurrentLiId) {
						//则可以执行动态效果函数，在此之前将预存储高亮值换为最新的
						nowCurrentLiId = nowCurrentLiIdScroll;
						//然后执行函数
						longPostNav();
					}
				}
			});
		//定义长菜单自动居中事件，此事件监听a元素中的class的变化，如果变化则生效
		var moveTopHeight = parseInt($('ul.post_nav_content').css('marginTop'));
		function longPostNav(){
			//首先计算父元素可容纳的数量，固定值
			//获取到父元素的高度 ，固定值
			var navParentHeight = parseInt($('.post_nav_main').css('height'));
			//计算可容纳的子元素个数，固定值
			var maxChildNum = navParentHeight/30;
				//判断是否超过可容纳的最大限度，如果超过则生效，这个判断需要在标签已展开的情况才判断，而不是加载就判断,否则未展开前，如果用户滚动，则会展开后bug
				if($(".post_nav_main").css('display') == 'block'){
					if ($('#post_nav ul li').length >= maxChildNum) {

							//获取到当前具有高亮值的a元素的父元素LI
							var $nowCurrentLi = $('#post_nav a[class*=current]').parent();
							//获取它前面的兄弟元素并且计算个数
							var prevSlibingLiAllLingth = $nowCurrentLi.prevAll().length;
							//获取它后面的所有兄弟元素并且计算个数
							var nextSlibingLiAllLingth = $nowCurrentLi.nextAll().length;

							//此处需要判断其是否为最顶部或者最底部的几个选项
							//如果他又满足了前面已经没有足够的兄弟元素，则让父元素ul直接回归原位
							if(prevSlibingLiAllLingth <= maxChildNum/2){

								$('ul.post_nav_content').animate({'marginTop':'0px'},0);

							}

							//同时，如果他又满足了后面没有足够的兄弟元素了，则让父元素完全置顶
							if(nextSlibingLiAllLingth <= maxChildNum/2){

								//获取到父DIV的总高度

								//获取到UL的总高度
								var navUlHieght = parseInt($('ul.post_nav_content').css('height')) - navParentHeight + 20;
								
								$('ul.post_nav_content').animate({'marginTop':  -navUlHieght + 'px'},0);
							}

							//开始判断如果其前后有足够的兄弟元素/最大长度的一半，则执行
							if (prevSlibingLiAllLingth >= maxChildNum/2 && nextSlibingLiAllLingth >=  maxChildNum/2 ) {


								//开始生效，计算出此元素的相对于父元素的文档的位置
								//临时转换两个个dom元素，供下方函数使用
								var nowCurrentLi = $nowCurrentLi[0];
								var navDiv = $nowCurrentLi.parent().parent()[0];

								//首先获取到他的页面据对高度
								var nowCurrentLiWindow = $(window).scrollTop() - parseInt($nowCurrentLi.offset().top);

								//然后获取到父div元素的页面绝对高度
								var navDivWindow = parseInt($nowCurrentLi.parent().parent().offset().top);


								//拿其页面绝对高度 - 父div元素的页面绝对高度，可以得到他距离div元素的值
								var navLiDivheight = nowCurrentLiWindow - navDivWindow;

								//获取UL距离顶部实时高度
								moveTopHeight = parseInt($('ul.post_nav_content').css('marginTop'));
								
								//计算此数值,拿距离值减去div一半的值，加上微调的值，就等于要移动的值
								moveTopHeight -=  (navLiDivheight - navParentHeight/2 + 30);

								//把此位置计算为一个高度数值，赋予父元素的margin-top属性
								$('ul.post_nav_content').animate({'marginTop':moveTopHeight +'px'},0);

							}
					}
			}
		}

		//开始添加侧边菜单点击效果的事件
		//定义定位菜单的折叠与否
		$('#closeNav').click(function(){
			//添加判断函数，此文章的导航信息超过3条才得以展开
			if ($('#post_nav ul li').length >= 2) {
				//如果菜单处于打开状态则关闭它，并且切换图标
				if ($('#post_nav').css('left') == '-210px') {
						$('.post_nav_main').animate({'opacity':'0'},300,function(){
							$('.post_nav_main').css('display','none');
							//此时要判断如果菜单在打开时被移动，则在此时返回，但是在后面和按钮回调函数一起执行，而不是首先执行
							if ($('span.post_prev').css('marginLeft') == '-350px'){
								$('span.post_prev').animate({'marginLeft':'-150px'},300);
							}
							$('#post_nav').animate({'left':'0px'},300);
							$('#closeNav').removeClass().addClass('fa fa-chevron-left');
						});
				}else{
					//否则，菜单就是处于关闭状态，打开即可，并且切换图标
					//此时要判断如果菜单的数量超过8个，也就是可以覆盖按钮的高度，则在弹出之前添加上一篇按钮的图标左移事件
					if ($('#post_nav ul li').length >= 8) {
						$('span.post_prev').animate({'marginLeft':'-350px'},300);
					}
						$('#post_nav').animate({'left':'-210px'},300,function(){
							$('.post_nav_main').css('display','block').animate({'opacity':'1'},300);
							$('#closeNav').removeClass().addClass('fa fa-chevron-right');
						});
				}
			}else{
				//如果本文的有效导航标签不超过三个，则不开启菜单，并且提醒用户
				//为避免多次点击重复，首先判断是否有此元素，如果已经有了，则直接返回
				if ($('#contextNoTag').length) {
					return;
				}
				$('body').append('<div id="contextNoTag" style="position:fixed;top:46%;left: 40%;background-color:#E1E1E1;width: 350px;height: 60px;text-align: center;line-height: 60px;font-size: 14px;color: #606060;">抱歉，本文并没有提供更多有效的导航信息</div>');
				setTimeout(function(){
					$('#contextNoTag').animate({opacity:0},300,function(){
						$('#contextNoTag').remove();
					});
				},2000);
			}
		});

		//定义到顶部和底部事件
		//定义向上悬停定时器
		function navToPrev() {
		        $(window).scrollTop($(window).scrollTop() - 1),
		        fq = setTimeout(function() {
		            navToPrev()
		        },
		        50)
		    };
		//定义向下悬停定时器
		function navToNext() {
		        $(window).scrollTop($(window).scrollTop() + 1),
		        fq = setTimeout(function() {
		            navToNext()
		        },
		        50)
		    }
		//获取到屏幕高度
		var screenHeight = $(window).height();
		//定义每次点击需要滚动的高度，设置为页面高度的3分之2
		var pageScollHeight = $(window).height() - $(window).height()/3;
		//定义向上按钮的：鼠标悬停和移除事件，以及点击事件
		$('#navToPrev').hover(function(){
			//鼠标放上时，触发向上定时器
			navToPrev();
		},function(){
			//鼠标移除时，释放此定时器
			clearTimeout(fq);
		}).click(function(){
			//鼠标点击时，页面向上滚动指定的距离
	        $("body,html").animate({
	            scrollTop: "-=" + pageScollHeight
	        },
	        400);
		});
		//定义向下按钮的：鼠标悬停和移除事件，以及点击事件
		$('#navToNext').hover(function(){
			//鼠标放上时触发向下定时器
			navToNext();
		},function(){
			//鼠标移除时释放定时器
			clearTimeout(fq);
		}).click(function(){
			//鼠标点击时，文档向下滚动指定的距离
			$("body,html").animate({
	            scrollTop: "+=" + pageScollHeight
	        },
	        400);
		});

	}
	//首次加载完自调
	postNavClick();
	//函数完毕，定义ajax重载事件
	$('#container').ajaxComplete(postNavClick);



	//定义代码高亮事件
	//定义代码高亮函数
	function codeHighLight(){
		//函数运作开始
		//判断如果当前页面有被引用的内容则继续执行
		if ($('.context blockquote').length) {
			//预定义高亮三个不同标签（数组）
			var codeHighLightSpanSign = ['(',')','{','}',',','*','[',']','$','^','%','#'];
			//找到所有引用的内容，遍历并分析
			$('.context blockquote').each(function(){
				//开始遍历处理
				//预定义处理后的带标签的内容（空字符串）
				var codeHighLightNew = '';
				//将遍历的内容转换为字符串
				var codeStr = $(this).html();
				//遍历这一段字符串，给找到的相对应的标点符号加上相应的标签
				for (var i = 0; i < codeStr.length; i++) {
					//此时已开始遍历，如果符合，则被修改，不符合，则直接赋原值给新变量
					var codeStrNew = codeStr[i];
					//再遍历预定义标签（数组一）
					for (var j = 0; j < codeHighLightSpanSign.length; j++) {
						//如果符合符号，则给其加上符号的class
						if (codeStr[i] == codeHighLightSpanSign[j]) {
							//如果被修改了，则此处就把被修改的覆盖给新变量
							codeStrNew = '<span class="codeHighLightSign">'+codeStr[i]+'</span>';
						}
					}
					//新变量接收到的要么是修改过的要么是原数据
					codeHighLightNew += codeStrNew;
				}
				//使用正则匹配来匹配语法单词，以使相匹配的单词加上相匹配的标签
				//定义正则表达式
				var codeTag = /(define|echo|console.log|var|return|if|length|object|null|document|scope|rootscope|controlle|angular|java|script|html|head|body|<title>|ajax|option|select|style|for|value|meta)/ig;
				//修改后的数据直接覆盖
				codeHighLightNew = codeHighLightNew.replace(codeTag,'<span class="codeHighLightTag" >$1</span>');
				//新数据直接加载进原容器
				$(this).html(codeHighLightNew)
			});
			//事件完成，释放内存
			codeHighLightNew = null;
		}
	}
	//首次加载完成函数自调
	codeHighLight();
	//Ajax请求完成后重新调用
	$('#container').ajaxComplete(codeHighLight);

})